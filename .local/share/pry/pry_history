exit
ProjectionDebt.new(id: '6')
ProjectionDebt
exit
ProjectionDebt(1, 2018)
ProjectionDebt.new(1)
require('app/model/projection_debt.rb')
require('model/projection_debt.rb')
require('projection_debt.rb')
exxit
exit
debt_transaction_items_path
exit
require('banco_central')
BancoCentral.last(:dolar)
exit
require "banco_central"
BancoCentral.last(:dolar)
BancoCentral.last
BancoCentral.all
BancoCentral.all(:dolar)
BancoCentral.all(:euro)
BancoCentral.all(:dolar)
exit
require 'banco_central'
BancoCentral.last(:euro)
BancoCentral.last(:usd)
BancoCentral.last(:dolar_americano)
BancoCentral.last(:dolar)
BancoCentral.last(1)
BancoCentral.last(2)
BancoCentral.last(3)
BancoCentral.all(3)
BancoCentral.all
BancoCentral.last(:dolar_compra)
BancoCentral.last(:dolar_venda)
BancoCentral.last(:real)
exit
require 'banco_central'
BancoCentral.last(:dolar)
BancoCentral.last(:brl)
BancoCentral.last
BancoCentral
bundle add brcotacao
exit
require('brcotacao')
require 'date'
date.now
Date.now
require 'date'
date
Date
Date.now
uma_date = Date.new(2020, 23, 9)
require 'date'
uma_date = Date.new(2020, 23, 9)
Date.new(2020, 23, 9)
date = Date.new(2007, 11, 10)  
date = Date.new(2020, 23, 10)
date = Date.new(2020, 10, 23)
euro.cotacao_agora 
euro.cotacao(data)
euro = BrCotacao::Euro.new
dolar = BrCotacao::Euro.new
dolar.cotacao(data)
data
dolar.cotacao(date)
euro.cotacao(dete)
euro.cotacao(date)
dolar.cotacao('23/10/2020')
dolar.cotacao('23/10/2020'.strp)
dolar.cotacao(Date.new('2020'))
dolar.cotacao(Date.new('2020, 12, 9'))
dolar.cotacao(Date.new(2020, 12, 9))
dolar.cotacao(Date.new(2011, 12, 9))
exit
require 'banco_central'
BancoCentral.last
BancoCentral.last(:dolar)
BancoCentral.last(:euro)
str = %[EuroTaxa de câmbio - Livre - Euro (venda)]
str = %i[EuroTaxa de câmbio - Livre - Euro (venda)]
str[6]
str[6].lowcase
str[6].downcase
banco_central = BancoCentral.last(
exit
require 'banco_central'
BancoCentral(:dolar)
BancoCentral.last(:dolar)
BancoCentral.last(:euro)
BancoCentral.last(:coroa_dinamarquesa)
moeda = BancoCentral.last(:coroa_dinamarquesa)
substr = moeda['nome']
substr = moeda['name']
substr = moeda.name
substr = moeda[:name]
substr = %i[moeda[:name])
require
exit
require 'banco_central'
moeda = BancoCentral.last(:coroa_dinamarquesa)
string = %i[moreda(:name)]
string = %i[moeda(:name)]
moeda
moeda(:name)
moeda[:name]
string = %i[moeda[:name]]
string = %i(moeda[:name])
string = %imoeda[:name]
string = %moeda[:name]
string = moeda[:name]
string
exit
reload!
require 'banco_central'
moeda = BancoCentral.last(:coroa_dinamarquesa)
moeda[:name]
string = %i[moeda[:name]]
string = %i["moeda[:name]"]
string = %i[moeda[:name]]
string = [moeda[:name]]
string = i%[moeda[:name]]
string = %i[moeda[:name]]
string = %i[]
string = %i[lorem ipsor]
string = moeda[:nome]
string = moeda[:name]
string
%i[string]
i%[string]
%i[string]
string
string.strf
string.str
string.strip
%i[string.strip]
moeda
moeda.name
moeda
moeda[:name]
moeda[%i[:name]]
moeda[:name]
%i[moeda[:name]]
%i[BancoCentral.last(:coroa_norueguesa)]
BancoCentral.last(:coroa_norueguesa)
BancoCentral.last(:coroa_norueguesa).name
BancoCentral.last(:coroa_norueguesa)[:name]
name = BancoCentral.last(:coroa_norueguesa)[:name]
name
name.to_s
%[name.to_s]
%i[name.to_s]
%i[:name]
%i[name]
%i[]
%i["Taxa de câmbio - Livre - Coroa Norueguesa (venda)"]
%i[name.to_a]
name
name.to_a
name.to_s
name.to_r
name.to_f
name.to_r
name.to_c
name.as_json
require 'json'
name.json
name.constantize
exit
require 'banco_central'
BancoCentral.last
BancoCentral.last.each do |moeda|
  moeda
end
times.12 BancoCentral.last do
end
times.12 BancoCentral.last(:labels)
BancoCentral.last(:labels)
BancoCentral.last(:bovespa)
EXIT
exut
exit
require = banco_central'
require = 'banco_central'
require = "banco_central"
require"banco_central"
BancoCentral.last
BancoCentral.last(:dolar)
exit
require 'faker'
Faker::Date.between(from: '2013', to: '2020')
Faker::Date.between(from: '2013-01-01', to: '2020-01-01')
MinhaData = Faker::Date.between(from: '2013-01-01', to: '2020-01-01')
MinhaData.strftime("%m/%Y")
require 'date'
require 'Date'
Date.current
Datetime.current
DateTime
require 'DateTime'
DateTime.current
Faker::Date.between_except(from: 1.year.ago, to: 1.year.from_now, excepted: Date.today)
require 'Date'
1.year.go
1.year.ago
Faker::Date.backward(days: 14)
Time.zone
Time.zone.current
Date.current
DateTime.current
exit
